
rotation_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00000e62  00000ef6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  0080012c  0080012c  00000f22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca3  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000998  00000000  00000000  00001d23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072c  00000000  00000000  000026bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00002de8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000557  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000471  00000000  00000000  00003577  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000039e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <main>
  9e:	0c 94 2f 07 	jmp	0xe5e	; 0xe5e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_1>:
	
	return 0;
}

//INT0 Interrupt
ISR (INT0_vect){
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	cf 92       	push	r12
  b2:	df 92       	push	r13
  b4:	ef 92       	push	r14
  b6:	ff 92       	push	r15
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
  d0:	f8 94       	cli
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		pulse_rpm_count++;
  d2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <pulse_rpm_count>
  d6:	8f 5f       	subi	r24, 0xFF	; 255
		if(pulse_rpm_count>=7){
  d8:	87 30       	cpi	r24, 0x07	; 7
  da:	18 f4       	brcc	.+6      	; 0xe2 <__vector_1+0x3c>
}

//INT0 Interrupt
ISR (INT0_vect){
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		pulse_rpm_count++;
  dc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <pulse_rpm_count>
  e0:	36 c0       	rjmp	.+108    	; 0x14e <__vector_1+0xa8>
		if(pulse_rpm_count>=7){
			pulse_rpm_count=0;
  e2:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <pulse_rpm_count>
			current_rpm_millis = millis();
  e6:	0e 94 cb 01 	call	0x396	; 0x396 <millis>
  ea:	6b 01       	movw	r12, r22
  ec:	7c 01       	movw	r14, r24
  ee:	60 93 92 01 	sts	0x0192, r22	; 0x800192 <current_rpm_millis>
  f2:	70 93 93 01 	sts	0x0193, r23	; 0x800193 <current_rpm_millis+0x1>
  f6:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <current_rpm_millis+0x2>
  fa:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <current_rpm_millis+0x3>
			rpm = (float)60000/(current_rpm_millis - previous_rpm_millis);
  fe:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <previous_rpm_millis>
 102:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <previous_rpm_millis+0x1>
 106:	a0 91 98 01 	lds	r26, 0x0198	; 0x800198 <previous_rpm_millis+0x2>
 10a:	b0 91 99 01 	lds	r27, 0x0199	; 0x800199 <previous_rpm_millis+0x3>
 10e:	a7 01       	movw	r20, r14
 110:	96 01       	movw	r18, r12
 112:	28 1b       	sub	r18, r24
 114:	39 0b       	sbc	r19, r25
 116:	4a 0b       	sbc	r20, r26
 118:	5b 0b       	sbc	r21, r27
 11a:	ca 01       	movw	r24, r20
 11c:	b9 01       	movw	r22, r18
 11e:	0e 94 91 03 	call	0x722	; 0x722 <__floatunsisf>
 122:	9b 01       	movw	r18, r22
 124:	ac 01       	movw	r20, r24
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	70 e6       	ldi	r23, 0x60	; 96
 12a:	8a e6       	ldi	r24, 0x6A	; 106
 12c:	97 e4       	ldi	r25, 0x47	; 71
 12e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__divsf3>
 132:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fixsfsi>
 136:	70 93 ae 01 	sts	0x01AE, r23	; 0x8001ae <rpm+0x1>
 13a:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <rpm>
			previous_rpm_millis = current_rpm_millis;
 13e:	c0 92 96 01 	sts	0x0196, r12	; 0x800196 <previous_rpm_millis>
 142:	d0 92 97 01 	sts	0x0197, r13	; 0x800197 <previous_rpm_millis+0x1>
 146:	e0 92 98 01 	sts	0x0198, r14	; 0x800198 <previous_rpm_millis+0x2>
 14a:	f0 92 99 01 	sts	0x0199, r15	; 0x800199 <previous_rpm_millis+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 14e:	78 94       	sei
		}
	}
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	4f 91       	pop	r20
 164:	3f 91       	pop	r19
 166:	2f 91       	pop	r18
 168:	ff 90       	pop	r15
 16a:	ef 90       	pop	r14
 16c:	df 90       	pop	r13
 16e:	cf 90       	pop	r12
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <init>:

void init(void){
	//Port configuration
	//1 -> output, 0 -> input
	DDRB |= 0b00100010;		//Set PB1 (arduino digital pin 9) and PB5 (arduino digital pin 13) as output
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	82 62       	ori	r24, 0x22	; 34
 17e:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << DDD2);     // Set PD2/INT0 (arduino digital pin 2) as input
 180:	52 98       	cbi	0x0a, 2	; 10
	
	USART_Init();	//Start USART
 182:	0e 94 76 02 	call	0x4ec	; 0x4ec <USART_Init>
	
	//Interrupt Config
	EICRA |= 0b00000011;    //The rising edge of INT0 generates an interrupt request (ISC00, ISC01)
 186:	e9 e6       	ldi	r30, 0x69	; 105
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	83 60       	ori	r24, 0x03	; 3
 18e:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     //Turns on INT0
 190:	e8 9a       	sbi	0x1d, 0	; 29
	ticks_init();
 192:	0e 94 bd 01 	call	0x37a	; 0x37a <ticks_init>
	USART_rxIE();	//enable usart receive interrupt
 196:	0e 94 99 02 	call	0x532	; 0x532 <USART_rxIE>
	sei();          // turn on interrupts
 19a:	78 94       	sei
	
	USART_StrTx("WELCOME\r\n");
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 8a 02 	call	0x514	; 0x514 <USART_StrTx>
 1a4:	08 95       	ret

000001a6 <linear_control>:
}

void linear_control(void){
	if(rpm < rpm_set_point-10){
 1a6:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <rpm_set_point>
 1aa:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <rpm_set_point+0x1>
 1ae:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <rpm>
 1b2:	30 91 ae 01 	lds	r19, 0x01AE	; 0x8001ae <rpm+0x1>
 1b6:	ac 01       	movw	r20, r24
 1b8:	4a 50       	subi	r20, 0x0A	; 10
 1ba:	51 09       	sbc	r21, r1
 1bc:	24 17       	cp	r18, r20
 1be:	35 07       	cpc	r19, r21
 1c0:	44 f4       	brge	.+16     	; 0x1d2 <linear_control+0x2c>
		if(pwm<100){
 1c2:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 1c6:	84 36       	cpi	r24, 0x64	; 100
 1c8:	78 f4       	brcc	.+30     	; 0x1e8 <linear_control+0x42>
			pwm++;
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
 1d0:	0b c0       	rjmp	.+22     	; 0x1e8 <linear_control+0x42>
		}
	}
	else if(rpm > rpm_set_point+10){
 1d2:	0a 96       	adiw	r24, 0x0a	; 10
 1d4:	82 17       	cp	r24, r18
 1d6:	93 07       	cpc	r25, r19
 1d8:	3c f4       	brge	.+14     	; 0x1e8 <linear_control+0x42>
		if(pwm>0){
 1da:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 1de:	88 23       	and	r24, r24
 1e0:	19 f0       	breq	.+6      	; 0x1e8 <linear_control+0x42>
			pwm--;
 1e2:	81 50       	subi	r24, 0x01	; 1
 1e4:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__data_end>
		}
	}
	set_duty_PWM(pwm);
 1e8:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 1ec:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <set_duty_PWM>
 1f0:	08 95       	ret

000001f2 <main>:
void init(void);
void linear_control(void);


int main(void){
	init();
 1f2:	0e 94 bd 00 	call	0x17a	; 0x17a <init>
	
    while ( TRUE ) {
		current_blink_millis = millis();
		if(current_blink_millis - previous_blink_millis >= blink_interval){
			previous_blink_millis = current_blink_millis;
			led_builtin_status = !led_builtin_status;
 1f6:	31 2c       	mov	r3, r1
		}
		
		current_serial_millis = millis();
		if(current_serial_millis - previous_serial_millis >= serial_interval){
			previous_serial_millis = current_serial_millis;
			sprintf(string_buffer, "RPM: %u \r\n", rpm);
 1f8:	0f 2e       	mov	r0, r31
 1fa:	fa e0       	ldi	r31, 0x0A	; 10
 1fc:	ef 2e       	mov	r14, r31
 1fe:	f1 e0       	ldi	r31, 0x01	; 1
 200:	ff 2e       	mov	r15, r31
 202:	f0 2d       	mov	r31, r0
 204:	ce e2       	ldi	r28, 0x2E	; 46
 206:	d1 e0       	ldi	r29, 0x01	; 1
			USART_StrTx(string_buffer);
			sprintf(string_buffer, "PWM: %u \r\n", pwm);
 208:	05 e1       	ldi	r16, 0x15	; 21
 20a:	11 e0       	ldi	r17, 0x01	; 1
	
    while ( TRUE ) {
		current_blink_millis = millis();
		if(current_blink_millis - previous_blink_millis >= blink_interval){
			previous_blink_millis = current_blink_millis;
			led_builtin_status = !led_builtin_status;
 20c:	99 24       	eor	r9, r9
 20e:	93 94       	inc	r9
 210:	83 2c       	mov	r8, r3
		}
		
		current_serial_millis = millis();
		if(current_serial_millis - previous_serial_millis >= serial_interval){
			previous_serial_millis = current_serial_millis;
			sprintf(string_buffer, "RPM: %u \r\n", rpm);
 212:	ac 2e       	mov	r10, r28
 214:	bd 2e       	mov	r11, r29
		
		if( frame_status ){
			frame_status = 0;
			read_usart_rx_buffer(usart_rx_buffer);
			rpm_set_point = atoi(usart_rx_buffer);
			sprintf(string_buffer, "SP = %u \r\n", rpm_set_point);
 216:	0f 2e       	mov	r0, r31
 218:	f0 e2       	ldi	r31, 0x20	; 32
 21a:	cf 2e       	mov	r12, r31
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	df 2e       	mov	r13, r31
 220:	f0 2d       	mov	r31, r0

int main(void){
	init();
	
    while ( TRUE ) {
		current_blink_millis = millis();
 222:	0e 94 cb 01 	call	0x396	; 0x396 <millis>
 226:	60 93 a2 01 	sts	0x01A2, r22	; 0x8001a2 <current_blink_millis>
 22a:	70 93 a3 01 	sts	0x01A3, r23	; 0x8001a3 <current_blink_millis+0x1>
 22e:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <current_blink_millis+0x2>
 232:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <current_blink_millis+0x3>
		if(current_blink_millis - previous_blink_millis >= blink_interval){
 236:	40 90 a6 01 	lds	r4, 0x01A6	; 0x8001a6 <previous_blink_millis>
 23a:	50 90 a7 01 	lds	r5, 0x01A7	; 0x8001a7 <previous_blink_millis+0x1>
 23e:	60 90 a8 01 	lds	r6, 0x01A8	; 0x8001a8 <previous_blink_millis+0x2>
 242:	70 90 a9 01 	lds	r7, 0x01A9	; 0x8001a9 <previous_blink_millis+0x3>
 246:	9b 01       	movw	r18, r22
 248:	ac 01       	movw	r20, r24
 24a:	24 19       	sub	r18, r4
 24c:	35 09       	sbc	r19, r5
 24e:	46 09       	sbc	r20, r6
 250:	57 09       	sbc	r21, r7
 252:	29 01       	movw	r4, r18
 254:	3a 01       	movw	r6, r20
 256:	34 ef       	ldi	r19, 0xF4	; 244
 258:	43 16       	cp	r4, r19
 25a:	31 e0       	ldi	r19, 0x01	; 1
 25c:	53 06       	cpc	r5, r19
 25e:	61 04       	cpc	r6, r1
 260:	71 04       	cpc	r7, r1
 262:	b0 f0       	brcs	.+44     	; 0x290 <main+0x9e>
			previous_blink_millis = current_blink_millis;
 264:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <previous_blink_millis>
 268:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <previous_blink_millis+0x1>
 26c:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <previous_blink_millis+0x2>
 270:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <previous_blink_millis+0x3>
			led_builtin_status = !led_builtin_status;
 274:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <led_builtin_status>
 278:	99 2d       	mov	r25, r9
 27a:	81 11       	cpse	r24, r1
 27c:	98 2d       	mov	r25, r8
 27e:	90 93 2d 01 	sts	0x012D, r25	; 0x80012d <led_builtin_status>
			if(led_builtin_status){
 282:	81 11       	cpse	r24, r1
 284:	02 c0       	rjmp	.+4      	; 0x28a <main+0x98>
				Set_bit(PORTB, 5);
 286:	2d 9a       	sbi	0x05, 5	; 5
 288:	01 c0       	rjmp	.+2      	; 0x28c <main+0x9a>
			}
			else{
				Clr_bit(PORTB, 5);
 28a:	2d 98       	cbi	0x05, 5	; 5
			}
			linear_control();
 28c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <linear_control>
		}
		
		current_serial_millis = millis();
 290:	0e 94 cb 01 	call	0x396	; 0x396 <millis>
 294:	60 93 9a 01 	sts	0x019A, r22	; 0x80019a <current_serial_millis>
 298:	70 93 9b 01 	sts	0x019B, r23	; 0x80019b <current_serial_millis+0x1>
 29c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <current_serial_millis+0x2>
 2a0:	90 93 9d 01 	sts	0x019D, r25	; 0x80019d <current_serial_millis+0x3>
		if(current_serial_millis - previous_serial_millis >= serial_interval){
 2a4:	40 90 9e 01 	lds	r4, 0x019E	; 0x80019e <previous_serial_millis>
 2a8:	50 90 9f 01 	lds	r5, 0x019F	; 0x80019f <previous_serial_millis+0x1>
 2ac:	60 90 a0 01 	lds	r6, 0x01A0	; 0x8001a0 <previous_serial_millis+0x2>
 2b0:	70 90 a1 01 	lds	r7, 0x01A1	; 0x8001a1 <previous_serial_millis+0x3>
 2b4:	9b 01       	movw	r18, r22
 2b6:	ac 01       	movw	r20, r24
 2b8:	24 19       	sub	r18, r4
 2ba:	35 09       	sbc	r19, r5
 2bc:	46 09       	sbc	r20, r6
 2be:	57 09       	sbc	r21, r7
 2c0:	29 01       	movw	r4, r18
 2c2:	3a 01       	movw	r6, r20
 2c4:	34 ef       	ldi	r19, 0xF4	; 244
 2c6:	43 16       	cp	r4, r19
 2c8:	31 e0       	ldi	r19, 0x01	; 1
 2ca:	53 06       	cpc	r5, r19
 2cc:	61 04       	cpc	r6, r1
 2ce:	71 04       	cpc	r7, r1
 2d0:	78 f1       	brcs	.+94     	; 0x330 <main+0x13e>
			previous_serial_millis = current_serial_millis;
 2d2:	60 93 9e 01 	sts	0x019E, r22	; 0x80019e <previous_serial_millis>
 2d6:	70 93 9f 01 	sts	0x019F, r23	; 0x80019f <previous_serial_millis+0x1>
 2da:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <previous_serial_millis+0x2>
 2de:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <previous_serial_millis+0x3>
			sprintf(string_buffer, "RPM: %u \r\n", rpm);
 2e2:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <rpm+0x1>
 2e6:	8f 93       	push	r24
 2e8:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <rpm>
 2ec:	8f 93       	push	r24
 2ee:	ff 92       	push	r15
 2f0:	ef 92       	push	r14
 2f2:	df 93       	push	r29
 2f4:	cf 93       	push	r28
 2f6:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf>
			USART_StrTx(string_buffer);
 2fa:	8a 2d       	mov	r24, r10
 2fc:	9b 2d       	mov	r25, r11
 2fe:	0e 94 8a 02 	call	0x514	; 0x514 <USART_StrTx>
			sprintf(string_buffer, "PWM: %u \r\n", pwm);
 302:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <__data_end>
 306:	1f 92       	push	r1
 308:	8f 93       	push	r24
 30a:	1f 93       	push	r17
 30c:	0f 93       	push	r16
 30e:	df 93       	push	r29
 310:	cf 93       	push	r28
 312:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf>
			USART_StrTx(string_buffer);
 316:	8a 2d       	mov	r24, r10
 318:	9b 2d       	mov	r25, r11
 31a:	0e 94 8a 02 	call	0x514	; 0x514 <USART_StrTx>
 31e:	2d b7       	in	r18, 0x3d	; 61
 320:	3e b7       	in	r19, 0x3e	; 62
 322:	24 5f       	subi	r18, 0xF4	; 244
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	3e bf       	out	0x3e, r19	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	2d bf       	out	0x3d, r18	; 61
		}
		
		if( frame_status ){
 330:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <frame_status>
 334:	88 23       	and	r24, r24
 336:	09 f4       	brne	.+2      	; 0x33a <main+0x148>
 338:	74 cf       	rjmp	.-280    	; 0x222 <main+0x30>
			frame_status = 0;
 33a:	30 92 bf 01 	sts	0x01BF, r3	; 0x8001bf <frame_status>
			read_usart_rx_buffer(usart_rx_buffer);
 33e:	82 ec       	ldi	r24, 0xC2	; 194
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <read_usart_rx_buffer>
			rpm_set_point = atoi(usart_rx_buffer);
 346:	82 ec       	ldi	r24, 0xC2	; 194
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 1f 04 	call	0x83e	; 0x83e <atoi>
 34e:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <rpm_set_point>
 352:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <rpm_set_point+0x1>
			sprintf(string_buffer, "SP = %u \r\n", rpm_set_point);
 356:	9f 93       	push	r25
 358:	8f 93       	push	r24
 35a:	df 92       	push	r13
 35c:	cf 92       	push	r12
 35e:	df 93       	push	r29
 360:	cf 93       	push	r28
 362:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf>
			USART_StrTx(string_buffer);
 366:	ce 01       	movw	r24, r28
 368:	0e 94 8a 02 	call	0x514	; 0x514 <USART_StrTx>
 36c:	0f 90       	pop	r0
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	54 cf       	rjmp	.-344    	; 0x222 <main+0x30>

0000037a <ticks_init>:
*
*	Return:			None
****************************************************************************************************************************************************************/
void ticks_init( void )
{
	TCCR0A |= (1 << WGM01);				// Set the Timer0 Mode to CTC
 37a:	84 b5       	in	r24, 0x24	; 36
 37c:	82 60       	ori	r24, 0x02	; 2
 37e:	84 bd       	out	0x24, r24	; 36
	OCR0A = ((F_CPU*0.0001)/8)-1;		// OCRn =  [ (clock_speed / Prescaler_value) * Desired_time_in_Seconds ] - 1 =  [ (16000000 / 8) * 100us ] - 1 = 199
 380:	87 ec       	ldi	r24, 0xC7	; 199
 382:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);			//Set the ISR COMPA vect
 384:	ee e6       	ldi	r30, 0x6E	; 110
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	80 81       	ld	r24, Z
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	80 83       	st	Z, r24
	TCCR0B |= (1 << CS01);	// set prescaler to 8 and start the timer
 38e:	85 b5       	in	r24, 0x25	; 37
 390:	82 60       	ori	r24, 0x02	; 2
 392:	85 bd       	out	0x25, r24	; 37
 394:	08 95       	ret

00000396 <millis>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 396:	f8 94       	cli
unsigned long int millis(void)
{
	unsigned long int tick_1ms_temp;
	
	ATOMIC_BLOCK(ATOMIC_FORCEON){
		tick_1ms_temp = tick_1ms;
 398:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <tick_1ms>
 39c:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <tick_1ms+0x1>
 3a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <tick_1ms+0x2>
 3a4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <tick_1ms+0x3>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 3a8:	78 94       	sei
	}
	
	return tick_1ms_temp;
}
 3aa:	08 95       	ret

000003ac <__vector_14>:
*	TIMER1 Compare Output A Interrupt Service Routine
*	Increment ms_Counter at a rate of 1 ms
*
******************************************************************************************************************************************************************/
ISR( TIMER0_COMPA_vect )
{
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	4f 93       	push	r20
 3b8:	5f 93       	push	r21
 3ba:	6f 93       	push	r22
 3bc:	7f 93       	push	r23
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
	tick++;
 3c6:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <tick>
 3ca:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <tick+0x1>
 3ce:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <tick+0x2>
 3d2:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <tick+0x3>
 3d6:	01 96       	adiw	r24, 0x01	; 1
 3d8:	a1 1d       	adc	r26, r1
 3da:	b1 1d       	adc	r27, r1
 3dc:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <tick>
 3e0:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <tick+0x1>
 3e4:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <tick+0x2>
 3e8:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <tick+0x3>
	if(tick >= 10){
 3ec:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <tick>
 3f0:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <tick+0x1>
 3f4:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <tick+0x2>
 3f8:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <tick+0x3>
 3fc:	0a 97       	sbiw	r24, 0x0a	; 10
 3fe:	a1 05       	cpc	r26, r1
 400:	b1 05       	cpc	r27, r1
 402:	d8 f0       	brcs	.+54     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
		tick=0;
 404:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <tick>
 408:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <tick+0x1>
 40c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <tick+0x2>
 410:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <tick+0x3>
		tick_1ms++;
 414:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <tick_1ms>
 418:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <tick_1ms+0x1>
 41c:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <tick_1ms+0x2>
 420:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <tick_1ms+0x3>
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	a1 1d       	adc	r26, r1
 428:	b1 1d       	adc	r27, r1
 42a:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <tick_1ms>
 42e:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <tick_1ms+0x1>
 432:	a0 93 bd 01 	sts	0x01BD, r26	; 0x8001bd <tick_1ms+0x2>
 436:	b0 93 be 01 	sts	0x01BE, r27	; 0x8001be <tick_1ms+0x3>
	}
	
	pwm_tick++;
 43a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <pwm_tick>
 43e:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <pwm_tick+0x1>
 442:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <pwm_tick+0x2>
 446:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <pwm_tick+0x3>
 44a:	01 96       	adiw	r24, 0x01	; 1
 44c:	a1 1d       	adc	r26, r1
 44e:	b1 1d       	adc	r27, r1
 450:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <pwm_tick>
 454:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <pwm_tick+0x1>
 458:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <pwm_tick+0x2>
 45c:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <pwm_tick+0x3>
	if(pwm_tick>=pwm_period){
 460:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <pwm_tick>
 464:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <pwm_tick+0x1>
 468:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <pwm_tick+0x2>
 46c:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <pwm_tick+0x3>
 470:	84 36       	cpi	r24, 0x64	; 100
 472:	91 05       	cpc	r25, r1
 474:	a1 05       	cpc	r26, r1
 476:	b1 05       	cpc	r27, r1
 478:	50 f0       	brcs	.+20     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
		pwm_tick = 0;
 47a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <pwm_tick>
 47e:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <pwm_tick+0x1>
 482:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <pwm_tick+0x2>
 486:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <pwm_tick+0x3>
		PORTB |= 0b00000010;  // Set PB1 (arduino digital pin 9) to 1
 48a:	29 9a       	sbi	0x05, 1	; 5
 48c:	16 c0       	rjmp	.+44     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
	}
	else if(pwm_tick>=pwm_duty){
 48e:	40 91 b3 01 	lds	r20, 0x01B3	; 0x8001b3 <pwm_tick>
 492:	50 91 b4 01 	lds	r21, 0x01B4	; 0x8001b4 <pwm_tick+0x1>
 496:	60 91 b5 01 	lds	r22, 0x01B5	; 0x8001b5 <pwm_tick+0x2>
 49a:	70 91 b6 01 	lds	r23, 0x01B6	; 0x8001b6 <pwm_tick+0x3>
 49e:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <pwm_duty>
 4a2:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <pwm_duty+0x1>
 4a6:	a0 91 b1 01 	lds	r26, 0x01B1	; 0x8001b1 <pwm_duty+0x2>
 4aa:	b0 91 b2 01 	lds	r27, 0x01B2	; 0x8001b2 <pwm_duty+0x3>
 4ae:	48 17       	cp	r20, r24
 4b0:	59 07       	cpc	r21, r25
 4b2:	6a 07       	cpc	r22, r26
 4b4:	7b 07       	cpc	r23, r27
 4b6:	08 f0       	brcs	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			PORTB &= 0b11111101; // Set PB1 (arduino digital pin 9) to 0
 4b8:	29 98       	cbi	0x05, 1	; 5
	}
}
 4ba:	bf 91       	pop	r27
 4bc:	af 91       	pop	r26
 4be:	9f 91       	pop	r25
 4c0:	8f 91       	pop	r24
 4c2:	7f 91       	pop	r23
 4c4:	6f 91       	pop	r22
 4c6:	5f 91       	pop	r21
 4c8:	4f 91       	pop	r20
 4ca:	0f 90       	pop	r0
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	0f 90       	pop	r0
 4d0:	1f 90       	pop	r1
 4d2:	18 95       	reti

000004d4 <set_duty_PWM>:

void set_duty_PWM(unsigned char pwm_duty_temp){
	pwm_duty = pwm_duty_temp;
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a0 e0       	ldi	r26, 0x00	; 0
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <pwm_duty>
 4de:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <pwm_duty+0x1>
 4e2:	a0 93 b1 01 	sts	0x01B1, r26	; 0x8001b1 <pwm_duty+0x2>
 4e6:	b0 93 b2 01 	sts	0x01B2, r27	; 0x8001b2 <pwm_duty+0x3>
 4ea:	08 95       	ret

000004ec <USART_Init>:
//-------------------------------------------------------------------------------------------------------
unsigned char USART_Receive()
{
	while(!(UCSR0A & (1<<RXC0)));				// Espera o dado ser recebido
	return UDR0;
}
 4ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 4f0:	87 e6       	ldi	r24, 0x67	; 103
 4f2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 4f6:	88 e1       	ldi	r24, 0x18	; 24
 4f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 4fc:	86 e0       	ldi	r24, 0x06	; 6
 4fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 502:	08 95       	ret

00000504 <USART_Transmit>:
 504:	e0 ec       	ldi	r30, 0xC0	; 192
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	90 81       	ld	r25, Z
 50a:	95 ff       	sbrs	r25, 5
 50c:	fd cf       	rjmp	.-6      	; 0x508 <USART_Transmit+0x4>
 50e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 512:	08 95       	ret

00000514 <USART_StrTx>:

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	ec 01       	movw	r28, r24
	while(*ptr != '\0')
 51a:	88 81       	ld	r24, Y
 51c:	88 23       	and	r24, r24
 51e:	31 f0       	breq	.+12     	; 0x52c <USART_StrTx+0x18>
 520:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit(*ptr);
 522:	0e 94 82 02 	call	0x504	; 0x504 <USART_Transmit>
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
	while(*ptr != '\0')
 526:	89 91       	ld	r24, Y+
 528:	81 11       	cpse	r24, r1
 52a:	fb cf       	rjmp	.-10     	; 0x522 <USART_StrTx+0xe>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
}
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	08 95       	ret

00000532 <USART_rxIE>:
//-------------------------------------------------------------------------------------------------------
void USART_rxIE()
{
	UCSR0B |= (1 << RXCIE0 );
 532:	e1 ec       	ldi	r30, 0xC1	; 193
 534:	f0 e0       	ldi	r31, 0x00	; 0
 536:	80 81       	ld	r24, Z
 538:	80 68       	ori	r24, 0x80	; 128
 53a:	80 83       	st	Z, r24
 53c:	08 95       	ret

0000053e <__vector_18>:
char usart_rx_buffer[100];
volatile uint16_t indice = 0;
volatile uint8_t frame_status = 0;

ISR( USART_RX_vect )
{
 53e:	1f 92       	push	r1
 540:	0f 92       	push	r0
 542:	0f b6       	in	r0, 0x3f	; 63
 544:	0f 92       	push	r0
 546:	11 24       	eor	r1, r1
 548:	2f 93       	push	r18
 54a:	4f 93       	push	r20
 54c:	5f 93       	push	r21
 54e:	8f 93       	push	r24
 550:	9f 93       	push	r25
 552:	ef 93       	push	r30
 554:	ff 93       	push	r31
	 *  FE0 = Frame Error;
	 *  DOR0 = Data OverRun;
	 *  UPE0 = USART Parity Error;
	 */
	 
	 data = UDR0;
 556:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	
	if((UCSR0A & ((1 << FE0) | (1 << DOR0) | (1 << UPE0))) == 0)
 55a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 55e:	8c 71       	andi	r24, 0x1C	; 28
 560:	59 f5       	brne	.+86     	; 0x5b8 <__vector_18+0x7a>
	{

		/**
		 * Buffer cheio? Caso sim, reinicia indice
		 */		
		if(indice >= sizeof(usart_rx_buffer))
 562:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <indice>
 566:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <indice+0x1>
 56a:	84 36       	cpi	r24, 0x64	; 100
 56c:	91 05       	cpc	r25, r1
 56e:	20 f0       	brcs	.+8      	; 0x578 <__vector_18+0x3a>
		{
			indice = 0;
 570:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <indice+0x1>
 574:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <indice>
		}
		
		/**
		 * Caractere indicador de fim de frame;
		 */
		if( data == '\n' )
 578:	2a 30       	cpi	r18, 0x0A	; 10
 57a:	79 f4       	brne	.+30     	; 0x59a <__vector_18+0x5c>
		{
			usart_rx_buffer[indice] = '\0'; 
 57c:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <indice>
 580:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <indice+0x1>
 584:	ee 53       	subi	r30, 0x3E	; 62
 586:	fe 4f       	sbci	r31, 0xFE	; 254
 588:	10 82       	st	Z, r1
			frame_status = 1; 
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <frame_status>
			indice = 0;
 590:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <indice+0x1>
 594:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <indice>
 598:	0f c0       	rjmp	.+30     	; 0x5b8 <__vector_18+0x7a>
		} 
		/* Armazena os bytes recebidos no buffer */
		else {
			usart_rx_buffer[indice++] = data; 
 59a:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <indice>
 59e:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <indice+0x1>
 5a2:	ac 01       	movw	r20, r24
 5a4:	4f 5f       	subi	r20, 0xFF	; 255
 5a6:	5f 4f       	sbci	r21, 0xFF	; 255
 5a8:	50 93 c1 01 	sts	0x01C1, r21	; 0x8001c1 <indice+0x1>
 5ac:	40 93 c0 01 	sts	0x01C0, r20	; 0x8001c0 <indice>
 5b0:	fc 01       	movw	r30, r24
 5b2:	ee 53       	subi	r30, 0x3E	; 62
 5b4:	fe 4f       	sbci	r31, 0xFE	; 254
 5b6:	20 83       	st	Z, r18
		}
	
	}
}
 5b8:	ff 91       	pop	r31
 5ba:	ef 91       	pop	r30
 5bc:	9f 91       	pop	r25
 5be:	8f 91       	pop	r24
 5c0:	5f 91       	pop	r21
 5c2:	4f 91       	pop	r20
 5c4:	2f 91       	pop	r18
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <read_usart_rx_buffer>:

void read_usart_rx_buffer(char *temp_usart_rx_buffer){
 5d0:	08 95       	ret

000005d2 <__divsf3>:
 5d2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <__divsf3x>
 5d6:	0c 94 e5 03 	jmp	0x7ca	; 0x7ca <__fp_round>
 5da:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscB>
 5de:	58 f0       	brcs	.+22     	; 0x5f6 <__divsf3+0x24>
 5e0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_pscA>
 5e4:	40 f0       	brcs	.+16     	; 0x5f6 <__divsf3+0x24>
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <__divsf3+0x20>
 5e8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ea:	29 f0       	breq	.+10     	; 0x5f6 <__divsf3+0x24>
 5ec:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_inf>
 5f0:	51 11       	cpse	r21, r1
 5f2:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_szero>
 5f6:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <__fp_nan>

000005fa <__divsf3x>:
 5fa:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__fp_split3>
 5fe:	68 f3       	brcs	.-38     	; 0x5da <__divsf3+0x8>

00000600 <__divsf3_pse>:
 600:	99 23       	and	r25, r25
 602:	b1 f3       	breq	.-20     	; 0x5f0 <__divsf3+0x1e>
 604:	55 23       	and	r21, r21
 606:	91 f3       	breq	.-28     	; 0x5ec <__divsf3+0x1a>
 608:	95 1b       	sub	r25, r21
 60a:	55 0b       	sbc	r21, r21
 60c:	bb 27       	eor	r27, r27
 60e:	aa 27       	eor	r26, r26
 610:	62 17       	cp	r22, r18
 612:	73 07       	cpc	r23, r19
 614:	84 07       	cpc	r24, r20
 616:	38 f0       	brcs	.+14     	; 0x626 <__divsf3_pse+0x26>
 618:	9f 5f       	subi	r25, 0xFF	; 255
 61a:	5f 4f       	sbci	r21, 0xFF	; 255
 61c:	22 0f       	add	r18, r18
 61e:	33 1f       	adc	r19, r19
 620:	44 1f       	adc	r20, r20
 622:	aa 1f       	adc	r26, r26
 624:	a9 f3       	breq	.-22     	; 0x610 <__divsf3_pse+0x10>
 626:	35 d0       	rcall	.+106    	; 0x692 <__divsf3_pse+0x92>
 628:	0e 2e       	mov	r0, r30
 62a:	3a f0       	brmi	.+14     	; 0x63a <__divsf3_pse+0x3a>
 62c:	e0 e8       	ldi	r30, 0x80	; 128
 62e:	32 d0       	rcall	.+100    	; 0x694 <__divsf3_pse+0x94>
 630:	91 50       	subi	r25, 0x01	; 1
 632:	50 40       	sbci	r21, 0x00	; 0
 634:	e6 95       	lsr	r30
 636:	00 1c       	adc	r0, r0
 638:	ca f7       	brpl	.-14     	; 0x62c <__divsf3_pse+0x2c>
 63a:	2b d0       	rcall	.+86     	; 0x692 <__divsf3_pse+0x92>
 63c:	fe 2f       	mov	r31, r30
 63e:	29 d0       	rcall	.+82     	; 0x692 <__divsf3_pse+0x92>
 640:	66 0f       	add	r22, r22
 642:	77 1f       	adc	r23, r23
 644:	88 1f       	adc	r24, r24
 646:	bb 1f       	adc	r27, r27
 648:	26 17       	cp	r18, r22
 64a:	37 07       	cpc	r19, r23
 64c:	48 07       	cpc	r20, r24
 64e:	ab 07       	cpc	r26, r27
 650:	b0 e8       	ldi	r27, 0x80	; 128
 652:	09 f0       	breq	.+2      	; 0x656 <__divsf3_pse+0x56>
 654:	bb 0b       	sbc	r27, r27
 656:	80 2d       	mov	r24, r0
 658:	bf 01       	movw	r22, r30
 65a:	ff 27       	eor	r31, r31
 65c:	93 58       	subi	r25, 0x83	; 131
 65e:	5f 4f       	sbci	r21, 0xFF	; 255
 660:	3a f0       	brmi	.+14     	; 0x670 <__divsf3_pse+0x70>
 662:	9e 3f       	cpi	r25, 0xFE	; 254
 664:	51 05       	cpc	r21, r1
 666:	78 f0       	brcs	.+30     	; 0x686 <__divsf3_pse+0x86>
 668:	0c 94 ce 03 	jmp	0x79c	; 0x79c <__fp_inf>
 66c:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_szero>
 670:	5f 3f       	cpi	r21, 0xFF	; 255
 672:	e4 f3       	brlt	.-8      	; 0x66c <__divsf3_pse+0x6c>
 674:	98 3e       	cpi	r25, 0xE8	; 232
 676:	d4 f3       	brlt	.-12     	; 0x66c <__divsf3_pse+0x6c>
 678:	86 95       	lsr	r24
 67a:	77 95       	ror	r23
 67c:	67 95       	ror	r22
 67e:	b7 95       	ror	r27
 680:	f7 95       	ror	r31
 682:	9f 5f       	subi	r25, 0xFF	; 255
 684:	c9 f7       	brne	.-14     	; 0x678 <__divsf3_pse+0x78>
 686:	88 0f       	add	r24, r24
 688:	91 1d       	adc	r25, r1
 68a:	96 95       	lsr	r25
 68c:	87 95       	ror	r24
 68e:	97 f9       	bld	r25, 7
 690:	08 95       	ret
 692:	e1 e0       	ldi	r30, 0x01	; 1
 694:	66 0f       	add	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	88 1f       	adc	r24, r24
 69a:	bb 1f       	adc	r27, r27
 69c:	62 17       	cp	r22, r18
 69e:	73 07       	cpc	r23, r19
 6a0:	84 07       	cpc	r24, r20
 6a2:	ba 07       	cpc	r27, r26
 6a4:	20 f0       	brcs	.+8      	; 0x6ae <__divsf3_pse+0xae>
 6a6:	62 1b       	sub	r22, r18
 6a8:	73 0b       	sbc	r23, r19
 6aa:	84 0b       	sbc	r24, r20
 6ac:	ba 0b       	sbc	r27, r26
 6ae:	ee 1f       	adc	r30, r30
 6b0:	88 f7       	brcc	.-30     	; 0x694 <__divsf3_pse+0x94>
 6b2:	e0 95       	com	r30
 6b4:	08 95       	ret

000006b6 <__fixsfsi>:
 6b6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fixunssfsi>
 6ba:	68 94       	set
 6bc:	b1 11       	cpse	r27, r1
 6be:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_szero>
 6c2:	08 95       	ret

000006c4 <__fixunssfsi>:
 6c4:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_splitA>
 6c8:	88 f0       	brcs	.+34     	; 0x6ec <__fixunssfsi+0x28>
 6ca:	9f 57       	subi	r25, 0x7F	; 127
 6cc:	98 f0       	brcs	.+38     	; 0x6f4 <__fixunssfsi+0x30>
 6ce:	b9 2f       	mov	r27, r25
 6d0:	99 27       	eor	r25, r25
 6d2:	b7 51       	subi	r27, 0x17	; 23
 6d4:	b0 f0       	brcs	.+44     	; 0x702 <__fixunssfsi+0x3e>
 6d6:	e1 f0       	breq	.+56     	; 0x710 <__fixunssfsi+0x4c>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	1a f0       	brmi	.+6      	; 0x6e8 <__fixunssfsi+0x24>
 6e2:	ba 95       	dec	r27
 6e4:	c9 f7       	brne	.-14     	; 0x6d8 <__fixunssfsi+0x14>
 6e6:	14 c0       	rjmp	.+40     	; 0x710 <__fixunssfsi+0x4c>
 6e8:	b1 30       	cpi	r27, 0x01	; 1
 6ea:	91 f0       	breq	.+36     	; 0x710 <__fixunssfsi+0x4c>
 6ec:	0e 94 18 04 	call	0x830	; 0x830 <__fp_zero>
 6f0:	b1 e0       	ldi	r27, 0x01	; 1
 6f2:	08 95       	ret
 6f4:	0c 94 18 04 	jmp	0x830	; 0x830 <__fp_zero>
 6f8:	67 2f       	mov	r22, r23
 6fa:	78 2f       	mov	r23, r24
 6fc:	88 27       	eor	r24, r24
 6fe:	b8 5f       	subi	r27, 0xF8	; 248
 700:	39 f0       	breq	.+14     	; 0x710 <__fixunssfsi+0x4c>
 702:	b9 3f       	cpi	r27, 0xF9	; 249
 704:	cc f3       	brlt	.-14     	; 0x6f8 <__fixunssfsi+0x34>
 706:	86 95       	lsr	r24
 708:	77 95       	ror	r23
 70a:	67 95       	ror	r22
 70c:	b3 95       	inc	r27
 70e:	d9 f7       	brne	.-10     	; 0x706 <__fixunssfsi+0x42>
 710:	3e f4       	brtc	.+14     	; 0x720 <__fixunssfsi+0x5c>
 712:	90 95       	com	r25
 714:	80 95       	com	r24
 716:	70 95       	com	r23
 718:	61 95       	neg	r22
 71a:	7f 4f       	sbci	r23, 0xFF	; 255
 71c:	8f 4f       	sbci	r24, 0xFF	; 255
 71e:	9f 4f       	sbci	r25, 0xFF	; 255
 720:	08 95       	ret

00000722 <__floatunsisf>:
 722:	e8 94       	clt
 724:	09 c0       	rjmp	.+18     	; 0x738 <__floatsisf+0x12>

00000726 <__floatsisf>:
 726:	97 fb       	bst	r25, 7
 728:	3e f4       	brtc	.+14     	; 0x738 <__floatsisf+0x12>
 72a:	90 95       	com	r25
 72c:	80 95       	com	r24
 72e:	70 95       	com	r23
 730:	61 95       	neg	r22
 732:	7f 4f       	sbci	r23, 0xFF	; 255
 734:	8f 4f       	sbci	r24, 0xFF	; 255
 736:	9f 4f       	sbci	r25, 0xFF	; 255
 738:	99 23       	and	r25, r25
 73a:	a9 f0       	breq	.+42     	; 0x766 <__floatsisf+0x40>
 73c:	f9 2f       	mov	r31, r25
 73e:	96 e9       	ldi	r25, 0x96	; 150
 740:	bb 27       	eor	r27, r27
 742:	93 95       	inc	r25
 744:	f6 95       	lsr	r31
 746:	87 95       	ror	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b7 95       	ror	r27
 74e:	f1 11       	cpse	r31, r1
 750:	f8 cf       	rjmp	.-16     	; 0x742 <__floatsisf+0x1c>
 752:	fa f4       	brpl	.+62     	; 0x792 <__floatsisf+0x6c>
 754:	bb 0f       	add	r27, r27
 756:	11 f4       	brne	.+4      	; 0x75c <__floatsisf+0x36>
 758:	60 ff       	sbrs	r22, 0
 75a:	1b c0       	rjmp	.+54     	; 0x792 <__floatsisf+0x6c>
 75c:	6f 5f       	subi	r22, 0xFF	; 255
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	16 c0       	rjmp	.+44     	; 0x792 <__floatsisf+0x6c>
 766:	88 23       	and	r24, r24
 768:	11 f0       	breq	.+4      	; 0x76e <__floatsisf+0x48>
 76a:	96 e9       	ldi	r25, 0x96	; 150
 76c:	11 c0       	rjmp	.+34     	; 0x790 <__floatsisf+0x6a>
 76e:	77 23       	and	r23, r23
 770:	21 f0       	breq	.+8      	; 0x77a <__floatsisf+0x54>
 772:	9e e8       	ldi	r25, 0x8E	; 142
 774:	87 2f       	mov	r24, r23
 776:	76 2f       	mov	r23, r22
 778:	05 c0       	rjmp	.+10     	; 0x784 <__floatsisf+0x5e>
 77a:	66 23       	and	r22, r22
 77c:	71 f0       	breq	.+28     	; 0x79a <__floatsisf+0x74>
 77e:	96 e8       	ldi	r25, 0x86	; 134
 780:	86 2f       	mov	r24, r22
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	60 e0       	ldi	r22, 0x00	; 0
 786:	2a f0       	brmi	.+10     	; 0x792 <__floatsisf+0x6c>
 788:	9a 95       	dec	r25
 78a:	66 0f       	add	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	da f7       	brpl	.-10     	; 0x788 <__floatsisf+0x62>
 792:	88 0f       	add	r24, r24
 794:	96 95       	lsr	r25
 796:	87 95       	ror	r24
 798:	97 f9       	bld	r25, 7
 79a:	08 95       	ret

0000079c <__fp_inf>:
 79c:	97 f9       	bld	r25, 7
 79e:	9f 67       	ori	r25, 0x7F	; 127
 7a0:	80 e8       	ldi	r24, 0x80	; 128
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	08 95       	ret

000007a8 <__fp_nan>:
 7a8:	9f ef       	ldi	r25, 0xFF	; 255
 7aa:	80 ec       	ldi	r24, 0xC0	; 192
 7ac:	08 95       	ret

000007ae <__fp_pscA>:
 7ae:	00 24       	eor	r0, r0
 7b0:	0a 94       	dec	r0
 7b2:	16 16       	cp	r1, r22
 7b4:	17 06       	cpc	r1, r23
 7b6:	18 06       	cpc	r1, r24
 7b8:	09 06       	cpc	r0, r25
 7ba:	08 95       	ret

000007bc <__fp_pscB>:
 7bc:	00 24       	eor	r0, r0
 7be:	0a 94       	dec	r0
 7c0:	12 16       	cp	r1, r18
 7c2:	13 06       	cpc	r1, r19
 7c4:	14 06       	cpc	r1, r20
 7c6:	05 06       	cpc	r0, r21
 7c8:	08 95       	ret

000007ca <__fp_round>:
 7ca:	09 2e       	mov	r0, r25
 7cc:	03 94       	inc	r0
 7ce:	00 0c       	add	r0, r0
 7d0:	11 f4       	brne	.+4      	; 0x7d6 <__fp_round+0xc>
 7d2:	88 23       	and	r24, r24
 7d4:	52 f0       	brmi	.+20     	; 0x7ea <__fp_round+0x20>
 7d6:	bb 0f       	add	r27, r27
 7d8:	40 f4       	brcc	.+16     	; 0x7ea <__fp_round+0x20>
 7da:	bf 2b       	or	r27, r31
 7dc:	11 f4       	brne	.+4      	; 0x7e2 <__fp_round+0x18>
 7de:	60 ff       	sbrs	r22, 0
 7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fp_round+0x20>
 7e2:	6f 5f       	subi	r22, 0xFF	; 255
 7e4:	7f 4f       	sbci	r23, 0xFF	; 255
 7e6:	8f 4f       	sbci	r24, 0xFF	; 255
 7e8:	9f 4f       	sbci	r25, 0xFF	; 255
 7ea:	08 95       	ret

000007ec <__fp_split3>:
 7ec:	57 fd       	sbrc	r21, 7
 7ee:	90 58       	subi	r25, 0x80	; 128
 7f0:	44 0f       	add	r20, r20
 7f2:	55 1f       	adc	r21, r21
 7f4:	59 f0       	breq	.+22     	; 0x80c <__fp_splitA+0x10>
 7f6:	5f 3f       	cpi	r21, 0xFF	; 255
 7f8:	71 f0       	breq	.+28     	; 0x816 <__fp_splitA+0x1a>
 7fa:	47 95       	ror	r20

000007fc <__fp_splitA>:
 7fc:	88 0f       	add	r24, r24
 7fe:	97 fb       	bst	r25, 7
 800:	99 1f       	adc	r25, r25
 802:	61 f0       	breq	.+24     	; 0x81c <__fp_splitA+0x20>
 804:	9f 3f       	cpi	r25, 0xFF	; 255
 806:	79 f0       	breq	.+30     	; 0x826 <__fp_splitA+0x2a>
 808:	87 95       	ror	r24
 80a:	08 95       	ret
 80c:	12 16       	cp	r1, r18
 80e:	13 06       	cpc	r1, r19
 810:	14 06       	cpc	r1, r20
 812:	55 1f       	adc	r21, r21
 814:	f2 cf       	rjmp	.-28     	; 0x7fa <__fp_split3+0xe>
 816:	46 95       	lsr	r20
 818:	f1 df       	rcall	.-30     	; 0x7fc <__fp_splitA>
 81a:	08 c0       	rjmp	.+16     	; 0x82c <__fp_splitA+0x30>
 81c:	16 16       	cp	r1, r22
 81e:	17 06       	cpc	r1, r23
 820:	18 06       	cpc	r1, r24
 822:	99 1f       	adc	r25, r25
 824:	f1 cf       	rjmp	.-30     	; 0x808 <__fp_splitA+0xc>
 826:	86 95       	lsr	r24
 828:	71 05       	cpc	r23, r1
 82a:	61 05       	cpc	r22, r1
 82c:	08 94       	sec
 82e:	08 95       	ret

00000830 <__fp_zero>:
 830:	e8 94       	clt

00000832 <__fp_szero>:
 832:	bb 27       	eor	r27, r27
 834:	66 27       	eor	r22, r22
 836:	77 27       	eor	r23, r23
 838:	cb 01       	movw	r24, r22
 83a:	97 f9       	bld	r25, 7
 83c:	08 95       	ret

0000083e <atoi>:
 83e:	fc 01       	movw	r30, r24
 840:	88 27       	eor	r24, r24
 842:	99 27       	eor	r25, r25
 844:	e8 94       	clt
 846:	21 91       	ld	r18, Z+
 848:	20 32       	cpi	r18, 0x20	; 32
 84a:	e9 f3       	breq	.-6      	; 0x846 <atoi+0x8>
 84c:	29 30       	cpi	r18, 0x09	; 9
 84e:	10 f0       	brcs	.+4      	; 0x854 <atoi+0x16>
 850:	2e 30       	cpi	r18, 0x0E	; 14
 852:	c8 f3       	brcs	.-14     	; 0x846 <atoi+0x8>
 854:	2b 32       	cpi	r18, 0x2B	; 43
 856:	41 f0       	breq	.+16     	; 0x868 <atoi+0x2a>
 858:	2d 32       	cpi	r18, 0x2D	; 45
 85a:	39 f4       	brne	.+14     	; 0x86a <atoi+0x2c>
 85c:	68 94       	set
 85e:	04 c0       	rjmp	.+8      	; 0x868 <atoi+0x2a>
 860:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulhi_const_10>
 864:	82 0f       	add	r24, r18
 866:	91 1d       	adc	r25, r1
 868:	21 91       	ld	r18, Z+
 86a:	20 53       	subi	r18, 0x30	; 48
 86c:	2a 30       	cpi	r18, 0x0A	; 10
 86e:	c0 f3       	brcs	.-16     	; 0x860 <atoi+0x22>
 870:	1e f4       	brtc	.+6      	; 0x878 <atoi+0x3a>
 872:	90 95       	com	r25
 874:	81 95       	neg	r24
 876:	9f 4f       	sbci	r25, 0xFF	; 255
 878:	08 95       	ret

0000087a <__mulhi_const_10>:
 87a:	7a e0       	ldi	r23, 0x0A	; 10
 87c:	97 9f       	mul	r25, r23
 87e:	90 2d       	mov	r25, r0
 880:	87 9f       	mul	r24, r23
 882:	80 2d       	mov	r24, r0
 884:	91 0d       	add	r25, r1
 886:	11 24       	eor	r1, r1
 888:	08 95       	ret

0000088a <sprintf>:
 88a:	ae e0       	ldi	r26, 0x0E	; 14
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	eb e4       	ldi	r30, 0x4B	; 75
 890:	f4 e0       	ldi	r31, 0x04	; 4
 892:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__prologue_saves__+0x1c>
 896:	0d 89       	ldd	r16, Y+21	; 0x15
 898:	1e 89       	ldd	r17, Y+22	; 0x16
 89a:	86 e0       	ldi	r24, 0x06	; 6
 89c:	8c 83       	std	Y+4, r24	; 0x04
 89e:	1a 83       	std	Y+2, r17	; 0x02
 8a0:	09 83       	std	Y+1, r16	; 0x01
 8a2:	8f ef       	ldi	r24, 0xFF	; 255
 8a4:	9f e7       	ldi	r25, 0x7F	; 127
 8a6:	9e 83       	std	Y+6, r25	; 0x06
 8a8:	8d 83       	std	Y+5, r24	; 0x05
 8aa:	ae 01       	movw	r20, r28
 8ac:	47 5e       	subi	r20, 0xE7	; 231
 8ae:	5f 4f       	sbci	r21, 0xFF	; 255
 8b0:	6f 89       	ldd	r22, Y+23	; 0x17
 8b2:	78 8d       	ldd	r23, Y+24	; 0x18
 8b4:	ce 01       	movw	r24, r28
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	0e 94 67 04 	call	0x8ce	; 0x8ce <vfprintf>
 8bc:	ef 81       	ldd	r30, Y+7	; 0x07
 8be:	f8 85       	ldd	r31, Y+8	; 0x08
 8c0:	e0 0f       	add	r30, r16
 8c2:	f1 1f       	adc	r31, r17
 8c4:	10 82       	st	Z, r1
 8c6:	2e 96       	adiw	r28, 0x0e	; 14
 8c8:	e4 e0       	ldi	r30, 0x04	; 4
 8ca:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__epilogue_restores__+0x1c>

000008ce <vfprintf>:
 8ce:	ab e0       	ldi	r26, 0x0B	; 11
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	ed e6       	ldi	r30, 0x6D	; 109
 8d4:	f4 e0       	ldi	r31, 0x04	; 4
 8d6:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__prologue_saves__>
 8da:	6c 01       	movw	r12, r24
 8dc:	7b 01       	movw	r14, r22
 8de:	8a 01       	movw	r16, r20
 8e0:	fc 01       	movw	r30, r24
 8e2:	17 82       	std	Z+7, r1	; 0x07
 8e4:	16 82       	std	Z+6, r1	; 0x06
 8e6:	83 81       	ldd	r24, Z+3	; 0x03
 8e8:	81 ff       	sbrs	r24, 1
 8ea:	cc c1       	rjmp	.+920    	; 0xc84 <__stack+0x385>
 8ec:	ce 01       	movw	r24, r28
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	3c 01       	movw	r6, r24
 8f2:	f6 01       	movw	r30, r12
 8f4:	93 81       	ldd	r25, Z+3	; 0x03
 8f6:	f7 01       	movw	r30, r14
 8f8:	93 fd       	sbrc	r25, 3
 8fa:	85 91       	lpm	r24, Z+
 8fc:	93 ff       	sbrs	r25, 3
 8fe:	81 91       	ld	r24, Z+
 900:	7f 01       	movw	r14, r30
 902:	88 23       	and	r24, r24
 904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
 906:	ba c1       	rjmp	.+884    	; 0xc7c <__stack+0x37d>
 908:	85 32       	cpi	r24, 0x25	; 37
 90a:	39 f4       	brne	.+14     	; 0x91a <__stack+0x1b>
 90c:	93 fd       	sbrc	r25, 3
 90e:	85 91       	lpm	r24, Z+
 910:	93 ff       	sbrs	r25, 3
 912:	81 91       	ld	r24, Z+
 914:	7f 01       	movw	r14, r30
 916:	85 32       	cpi	r24, 0x25	; 37
 918:	29 f4       	brne	.+10     	; 0x924 <__stack+0x25>
 91a:	b6 01       	movw	r22, r12
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 922:	e7 cf       	rjmp	.-50     	; 0x8f2 <vfprintf+0x24>
 924:	91 2c       	mov	r9, r1
 926:	21 2c       	mov	r2, r1
 928:	31 2c       	mov	r3, r1
 92a:	ff e1       	ldi	r31, 0x1F	; 31
 92c:	f3 15       	cp	r31, r3
 92e:	d8 f0       	brcs	.+54     	; 0x966 <__stack+0x67>
 930:	8b 32       	cpi	r24, 0x2B	; 43
 932:	79 f0       	breq	.+30     	; 0x952 <__stack+0x53>
 934:	38 f4       	brcc	.+14     	; 0x944 <__stack+0x45>
 936:	80 32       	cpi	r24, 0x20	; 32
 938:	79 f0       	breq	.+30     	; 0x958 <__stack+0x59>
 93a:	83 32       	cpi	r24, 0x23	; 35
 93c:	a1 f4       	brne	.+40     	; 0x966 <__stack+0x67>
 93e:	23 2d       	mov	r18, r3
 940:	20 61       	ori	r18, 0x10	; 16
 942:	1d c0       	rjmp	.+58     	; 0x97e <__stack+0x7f>
 944:	8d 32       	cpi	r24, 0x2D	; 45
 946:	61 f0       	breq	.+24     	; 0x960 <__stack+0x61>
 948:	80 33       	cpi	r24, 0x30	; 48
 94a:	69 f4       	brne	.+26     	; 0x966 <__stack+0x67>
 94c:	23 2d       	mov	r18, r3
 94e:	21 60       	ori	r18, 0x01	; 1
 950:	16 c0       	rjmp	.+44     	; 0x97e <__stack+0x7f>
 952:	83 2d       	mov	r24, r3
 954:	82 60       	ori	r24, 0x02	; 2
 956:	38 2e       	mov	r3, r24
 958:	e3 2d       	mov	r30, r3
 95a:	e4 60       	ori	r30, 0x04	; 4
 95c:	3e 2e       	mov	r3, r30
 95e:	2a c0       	rjmp	.+84     	; 0x9b4 <__stack+0xb5>
 960:	f3 2d       	mov	r31, r3
 962:	f8 60       	ori	r31, 0x08	; 8
 964:	1d c0       	rjmp	.+58     	; 0x9a0 <__stack+0xa1>
 966:	37 fc       	sbrc	r3, 7
 968:	2d c0       	rjmp	.+90     	; 0x9c4 <__stack+0xc5>
 96a:	20 ed       	ldi	r18, 0xD0	; 208
 96c:	28 0f       	add	r18, r24
 96e:	2a 30       	cpi	r18, 0x0A	; 10
 970:	40 f0       	brcs	.+16     	; 0x982 <__stack+0x83>
 972:	8e 32       	cpi	r24, 0x2E	; 46
 974:	b9 f4       	brne	.+46     	; 0x9a4 <__stack+0xa5>
 976:	36 fc       	sbrc	r3, 6
 978:	81 c1       	rjmp	.+770    	; 0xc7c <__stack+0x37d>
 97a:	23 2d       	mov	r18, r3
 97c:	20 64       	ori	r18, 0x40	; 64
 97e:	32 2e       	mov	r3, r18
 980:	19 c0       	rjmp	.+50     	; 0x9b4 <__stack+0xb5>
 982:	36 fe       	sbrs	r3, 6
 984:	06 c0       	rjmp	.+12     	; 0x992 <__stack+0x93>
 986:	8a e0       	ldi	r24, 0x0A	; 10
 988:	98 9e       	mul	r9, r24
 98a:	20 0d       	add	r18, r0
 98c:	11 24       	eor	r1, r1
 98e:	92 2e       	mov	r9, r18
 990:	11 c0       	rjmp	.+34     	; 0x9b4 <__stack+0xb5>
 992:	ea e0       	ldi	r30, 0x0A	; 10
 994:	2e 9e       	mul	r2, r30
 996:	20 0d       	add	r18, r0
 998:	11 24       	eor	r1, r1
 99a:	22 2e       	mov	r2, r18
 99c:	f3 2d       	mov	r31, r3
 99e:	f0 62       	ori	r31, 0x20	; 32
 9a0:	3f 2e       	mov	r3, r31
 9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <__stack+0xb5>
 9a4:	8c 36       	cpi	r24, 0x6C	; 108
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <__stack+0xb1>
 9a8:	83 2d       	mov	r24, r3
 9aa:	80 68       	ori	r24, 0x80	; 128
 9ac:	38 2e       	mov	r3, r24
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
 9b0:	88 36       	cpi	r24, 0x68	; 104
 9b2:	41 f4       	brne	.+16     	; 0x9c4 <__stack+0xc5>
 9b4:	f7 01       	movw	r30, r14
 9b6:	93 fd       	sbrc	r25, 3
 9b8:	85 91       	lpm	r24, Z+
 9ba:	93 ff       	sbrs	r25, 3
 9bc:	81 91       	ld	r24, Z+
 9be:	7f 01       	movw	r14, r30
 9c0:	81 11       	cpse	r24, r1
 9c2:	b3 cf       	rjmp	.-154    	; 0x92a <__stack+0x2b>
 9c4:	98 2f       	mov	r25, r24
 9c6:	9f 7d       	andi	r25, 0xDF	; 223
 9c8:	95 54       	subi	r25, 0x45	; 69
 9ca:	93 30       	cpi	r25, 0x03	; 3
 9cc:	28 f4       	brcc	.+10     	; 0x9d8 <__stack+0xd9>
 9ce:	0c 5f       	subi	r16, 0xFC	; 252
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	9f e3       	ldi	r25, 0x3F	; 63
 9d4:	99 83       	std	Y+1, r25	; 0x01
 9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <__stack+0xf3>
 9d8:	83 36       	cpi	r24, 0x63	; 99
 9da:	31 f0       	breq	.+12     	; 0x9e8 <__stack+0xe9>
 9dc:	83 37       	cpi	r24, 0x73	; 115
 9de:	71 f0       	breq	.+28     	; 0x9fc <__stack+0xfd>
 9e0:	83 35       	cpi	r24, 0x53	; 83
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <__stack+0xe7>
 9e4:	59 c0       	rjmp	.+178    	; 0xa98 <__stack+0x199>
 9e6:	21 c0       	rjmp	.+66     	; 0xa2a <__stack+0x12b>
 9e8:	f8 01       	movw	r30, r16
 9ea:	80 81       	ld	r24, Z
 9ec:	89 83       	std	Y+1, r24	; 0x01
 9ee:	0e 5f       	subi	r16, 0xFE	; 254
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	88 24       	eor	r8, r8
 9f4:	83 94       	inc	r8
 9f6:	91 2c       	mov	r9, r1
 9f8:	53 01       	movw	r10, r6
 9fa:	13 c0       	rjmp	.+38     	; 0xa22 <__stack+0x123>
 9fc:	28 01       	movw	r4, r16
 9fe:	f2 e0       	ldi	r31, 0x02	; 2
 a00:	4f 0e       	add	r4, r31
 a02:	51 1c       	adc	r5, r1
 a04:	f8 01       	movw	r30, r16
 a06:	a0 80       	ld	r10, Z
 a08:	b1 80       	ldd	r11, Z+1	; 0x01
 a0a:	36 fe       	sbrs	r3, 6
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__stack+0x115>
 a0e:	69 2d       	mov	r22, r9
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <__stack+0x119>
 a14:	6f ef       	ldi	r22, 0xFF	; 255
 a16:	7f ef       	ldi	r23, 0xFF	; 255
 a18:	c5 01       	movw	r24, r10
 a1a:	0e 94 53 06 	call	0xca6	; 0xca6 <strnlen>
 a1e:	4c 01       	movw	r8, r24
 a20:	82 01       	movw	r16, r4
 a22:	f3 2d       	mov	r31, r3
 a24:	ff 77       	andi	r31, 0x7F	; 127
 a26:	3f 2e       	mov	r3, r31
 a28:	16 c0       	rjmp	.+44     	; 0xa56 <__stack+0x157>
 a2a:	28 01       	movw	r4, r16
 a2c:	22 e0       	ldi	r18, 0x02	; 2
 a2e:	42 0e       	add	r4, r18
 a30:	51 1c       	adc	r5, r1
 a32:	f8 01       	movw	r30, r16
 a34:	a0 80       	ld	r10, Z
 a36:	b1 80       	ldd	r11, Z+1	; 0x01
 a38:	36 fe       	sbrs	r3, 6
 a3a:	03 c0       	rjmp	.+6      	; 0xa42 <__stack+0x143>
 a3c:	69 2d       	mov	r22, r9
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <__stack+0x147>
 a42:	6f ef       	ldi	r22, 0xFF	; 255
 a44:	7f ef       	ldi	r23, 0xFF	; 255
 a46:	c5 01       	movw	r24, r10
 a48:	0e 94 48 06 	call	0xc90	; 0xc90 <strnlen_P>
 a4c:	4c 01       	movw	r8, r24
 a4e:	f3 2d       	mov	r31, r3
 a50:	f0 68       	ori	r31, 0x80	; 128
 a52:	3f 2e       	mov	r3, r31
 a54:	82 01       	movw	r16, r4
 a56:	33 fc       	sbrc	r3, 3
 a58:	1b c0       	rjmp	.+54     	; 0xa90 <__stack+0x191>
 a5a:	82 2d       	mov	r24, r2
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	88 16       	cp	r8, r24
 a60:	99 06       	cpc	r9, r25
 a62:	b0 f4       	brcc	.+44     	; 0xa90 <__stack+0x191>
 a64:	b6 01       	movw	r22, r12
 a66:	80 e2       	ldi	r24, 0x20	; 32
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 a6e:	2a 94       	dec	r2
 a70:	f4 cf       	rjmp	.-24     	; 0xa5a <__stack+0x15b>
 a72:	f5 01       	movw	r30, r10
 a74:	37 fc       	sbrc	r3, 7
 a76:	85 91       	lpm	r24, Z+
 a78:	37 fe       	sbrs	r3, 7
 a7a:	81 91       	ld	r24, Z+
 a7c:	5f 01       	movw	r10, r30
 a7e:	b6 01       	movw	r22, r12
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 a86:	21 10       	cpse	r2, r1
 a88:	2a 94       	dec	r2
 a8a:	21 e0       	ldi	r18, 0x01	; 1
 a8c:	82 1a       	sub	r8, r18
 a8e:	91 08       	sbc	r9, r1
 a90:	81 14       	cp	r8, r1
 a92:	91 04       	cpc	r9, r1
 a94:	71 f7       	brne	.-36     	; 0xa72 <__stack+0x173>
 a96:	e8 c0       	rjmp	.+464    	; 0xc68 <__stack+0x369>
 a98:	84 36       	cpi	r24, 0x64	; 100
 a9a:	11 f0       	breq	.+4      	; 0xaa0 <__stack+0x1a1>
 a9c:	89 36       	cpi	r24, 0x69	; 105
 a9e:	41 f5       	brne	.+80     	; 0xaf0 <__stack+0x1f1>
 aa0:	f8 01       	movw	r30, r16
 aa2:	37 fe       	sbrs	r3, 7
 aa4:	07 c0       	rjmp	.+14     	; 0xab4 <__stack+0x1b5>
 aa6:	60 81       	ld	r22, Z
 aa8:	71 81       	ldd	r23, Z+1	; 0x01
 aaa:	82 81       	ldd	r24, Z+2	; 0x02
 aac:	93 81       	ldd	r25, Z+3	; 0x03
 aae:	0c 5f       	subi	r16, 0xFC	; 252
 ab0:	1f 4f       	sbci	r17, 0xFF	; 255
 ab2:	08 c0       	rjmp	.+16     	; 0xac4 <__stack+0x1c5>
 ab4:	60 81       	ld	r22, Z
 ab6:	71 81       	ldd	r23, Z+1	; 0x01
 ab8:	07 2e       	mov	r0, r23
 aba:	00 0c       	add	r0, r0
 abc:	88 0b       	sbc	r24, r24
 abe:	99 0b       	sbc	r25, r25
 ac0:	0e 5f       	subi	r16, 0xFE	; 254
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	f3 2d       	mov	r31, r3
 ac6:	ff 76       	andi	r31, 0x6F	; 111
 ac8:	3f 2e       	mov	r3, r31
 aca:	97 ff       	sbrs	r25, 7
 acc:	09 c0       	rjmp	.+18     	; 0xae0 <__stack+0x1e1>
 ace:	90 95       	com	r25
 ad0:	80 95       	com	r24
 ad2:	70 95       	com	r23
 ad4:	61 95       	neg	r22
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	f0 68       	ori	r31, 0x80	; 128
 ade:	3f 2e       	mov	r3, r31
 ae0:	2a e0       	ldi	r18, 0x0A	; 10
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	a3 01       	movw	r20, r6
 ae6:	0e 94 9a 06 	call	0xd34	; 0xd34 <__ultoa_invert>
 aea:	88 2e       	mov	r8, r24
 aec:	86 18       	sub	r8, r6
 aee:	45 c0       	rjmp	.+138    	; 0xb7a <__stack+0x27b>
 af0:	85 37       	cpi	r24, 0x75	; 117
 af2:	31 f4       	brne	.+12     	; 0xb00 <__stack+0x201>
 af4:	23 2d       	mov	r18, r3
 af6:	2f 7e       	andi	r18, 0xEF	; 239
 af8:	b2 2e       	mov	r11, r18
 afa:	2a e0       	ldi	r18, 0x0A	; 10
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	25 c0       	rjmp	.+74     	; 0xb4a <__stack+0x24b>
 b00:	93 2d       	mov	r25, r3
 b02:	99 7f       	andi	r25, 0xF9	; 249
 b04:	b9 2e       	mov	r11, r25
 b06:	8f 36       	cpi	r24, 0x6F	; 111
 b08:	c1 f0       	breq	.+48     	; 0xb3a <__stack+0x23b>
 b0a:	18 f4       	brcc	.+6      	; 0xb12 <__stack+0x213>
 b0c:	88 35       	cpi	r24, 0x58	; 88
 b0e:	79 f0       	breq	.+30     	; 0xb2e <__stack+0x22f>
 b10:	b5 c0       	rjmp	.+362    	; 0xc7c <__stack+0x37d>
 b12:	80 37       	cpi	r24, 0x70	; 112
 b14:	19 f0       	breq	.+6      	; 0xb1c <__stack+0x21d>
 b16:	88 37       	cpi	r24, 0x78	; 120
 b18:	21 f0       	breq	.+8      	; 0xb22 <__stack+0x223>
 b1a:	b0 c0       	rjmp	.+352    	; 0xc7c <__stack+0x37d>
 b1c:	e9 2f       	mov	r30, r25
 b1e:	e0 61       	ori	r30, 0x10	; 16
 b20:	be 2e       	mov	r11, r30
 b22:	b4 fe       	sbrs	r11, 4
 b24:	0d c0       	rjmp	.+26     	; 0xb40 <__stack+0x241>
 b26:	fb 2d       	mov	r31, r11
 b28:	f4 60       	ori	r31, 0x04	; 4
 b2a:	bf 2e       	mov	r11, r31
 b2c:	09 c0       	rjmp	.+18     	; 0xb40 <__stack+0x241>
 b2e:	34 fe       	sbrs	r3, 4
 b30:	0a c0       	rjmp	.+20     	; 0xb46 <__stack+0x247>
 b32:	29 2f       	mov	r18, r25
 b34:	26 60       	ori	r18, 0x06	; 6
 b36:	b2 2e       	mov	r11, r18
 b38:	06 c0       	rjmp	.+12     	; 0xb46 <__stack+0x247>
 b3a:	28 e0       	ldi	r18, 0x08	; 8
 b3c:	30 e0       	ldi	r19, 0x00	; 0
 b3e:	05 c0       	rjmp	.+10     	; 0xb4a <__stack+0x24b>
 b40:	20 e1       	ldi	r18, 0x10	; 16
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <__stack+0x24b>
 b46:	20 e1       	ldi	r18, 0x10	; 16
 b48:	32 e0       	ldi	r19, 0x02	; 2
 b4a:	f8 01       	movw	r30, r16
 b4c:	b7 fe       	sbrs	r11, 7
 b4e:	07 c0       	rjmp	.+14     	; 0xb5e <__stack+0x25f>
 b50:	60 81       	ld	r22, Z
 b52:	71 81       	ldd	r23, Z+1	; 0x01
 b54:	82 81       	ldd	r24, Z+2	; 0x02
 b56:	93 81       	ldd	r25, Z+3	; 0x03
 b58:	0c 5f       	subi	r16, 0xFC	; 252
 b5a:	1f 4f       	sbci	r17, 0xFF	; 255
 b5c:	06 c0       	rjmp	.+12     	; 0xb6a <__stack+0x26b>
 b5e:	60 81       	ld	r22, Z
 b60:	71 81       	ldd	r23, Z+1	; 0x01
 b62:	80 e0       	ldi	r24, 0x00	; 0
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	0e 5f       	subi	r16, 0xFE	; 254
 b68:	1f 4f       	sbci	r17, 0xFF	; 255
 b6a:	a3 01       	movw	r20, r6
 b6c:	0e 94 9a 06 	call	0xd34	; 0xd34 <__ultoa_invert>
 b70:	88 2e       	mov	r8, r24
 b72:	86 18       	sub	r8, r6
 b74:	fb 2d       	mov	r31, r11
 b76:	ff 77       	andi	r31, 0x7F	; 127
 b78:	3f 2e       	mov	r3, r31
 b7a:	36 fe       	sbrs	r3, 6
 b7c:	0d c0       	rjmp	.+26     	; 0xb98 <__stack+0x299>
 b7e:	23 2d       	mov	r18, r3
 b80:	2e 7f       	andi	r18, 0xFE	; 254
 b82:	a2 2e       	mov	r10, r18
 b84:	89 14       	cp	r8, r9
 b86:	58 f4       	brcc	.+22     	; 0xb9e <__stack+0x29f>
 b88:	34 fe       	sbrs	r3, 4
 b8a:	0b c0       	rjmp	.+22     	; 0xba2 <__stack+0x2a3>
 b8c:	32 fc       	sbrc	r3, 2
 b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__stack+0x2a3>
 b90:	83 2d       	mov	r24, r3
 b92:	8e 7e       	andi	r24, 0xEE	; 238
 b94:	a8 2e       	mov	r10, r24
 b96:	05 c0       	rjmp	.+10     	; 0xba2 <__stack+0x2a3>
 b98:	b8 2c       	mov	r11, r8
 b9a:	a3 2c       	mov	r10, r3
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <__stack+0x2a5>
 b9e:	b8 2c       	mov	r11, r8
 ba0:	01 c0       	rjmp	.+2      	; 0xba4 <__stack+0x2a5>
 ba2:	b9 2c       	mov	r11, r9
 ba4:	a4 fe       	sbrs	r10, 4
 ba6:	0f c0       	rjmp	.+30     	; 0xbc6 <__stack+0x2c7>
 ba8:	fe 01       	movw	r30, r28
 baa:	e8 0d       	add	r30, r8
 bac:	f1 1d       	adc	r31, r1
 bae:	80 81       	ld	r24, Z
 bb0:	80 33       	cpi	r24, 0x30	; 48
 bb2:	21 f4       	brne	.+8      	; 0xbbc <__stack+0x2bd>
 bb4:	9a 2d       	mov	r25, r10
 bb6:	99 7e       	andi	r25, 0xE9	; 233
 bb8:	a9 2e       	mov	r10, r25
 bba:	09 c0       	rjmp	.+18     	; 0xbce <__stack+0x2cf>
 bbc:	a2 fe       	sbrs	r10, 2
 bbe:	06 c0       	rjmp	.+12     	; 0xbcc <__stack+0x2cd>
 bc0:	b3 94       	inc	r11
 bc2:	b3 94       	inc	r11
 bc4:	04 c0       	rjmp	.+8      	; 0xbce <__stack+0x2cf>
 bc6:	8a 2d       	mov	r24, r10
 bc8:	86 78       	andi	r24, 0x86	; 134
 bca:	09 f0       	breq	.+2      	; 0xbce <__stack+0x2cf>
 bcc:	b3 94       	inc	r11
 bce:	a3 fc       	sbrc	r10, 3
 bd0:	11 c0       	rjmp	.+34     	; 0xbf4 <__stack+0x2f5>
 bd2:	a0 fe       	sbrs	r10, 0
 bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <__stack+0x2e3>
 bd6:	b2 14       	cp	r11, r2
 bd8:	88 f4       	brcc	.+34     	; 0xbfc <__stack+0x2fd>
 bda:	28 0c       	add	r2, r8
 bdc:	92 2c       	mov	r9, r2
 bde:	9b 18       	sub	r9, r11
 be0:	0e c0       	rjmp	.+28     	; 0xbfe <__stack+0x2ff>
 be2:	b2 14       	cp	r11, r2
 be4:	60 f4       	brcc	.+24     	; 0xbfe <__stack+0x2ff>
 be6:	b6 01       	movw	r22, r12
 be8:	80 e2       	ldi	r24, 0x20	; 32
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 bf0:	b3 94       	inc	r11
 bf2:	f7 cf       	rjmp	.-18     	; 0xbe2 <__stack+0x2e3>
 bf4:	b2 14       	cp	r11, r2
 bf6:	18 f4       	brcc	.+6      	; 0xbfe <__stack+0x2ff>
 bf8:	2b 18       	sub	r2, r11
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <__stack+0x301>
 bfc:	98 2c       	mov	r9, r8
 bfe:	21 2c       	mov	r2, r1
 c00:	a4 fe       	sbrs	r10, 4
 c02:	10 c0       	rjmp	.+32     	; 0xc24 <__stack+0x325>
 c04:	b6 01       	movw	r22, r12
 c06:	80 e3       	ldi	r24, 0x30	; 48
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c0e:	a2 fe       	sbrs	r10, 2
 c10:	17 c0       	rjmp	.+46     	; 0xc40 <__stack+0x341>
 c12:	a1 fc       	sbrc	r10, 1
 c14:	03 c0       	rjmp	.+6      	; 0xc1c <__stack+0x31d>
 c16:	88 e7       	ldi	r24, 0x78	; 120
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <__stack+0x321>
 c1c:	88 e5       	ldi	r24, 0x58	; 88
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	b6 01       	movw	r22, r12
 c22:	0c c0       	rjmp	.+24     	; 0xc3c <__stack+0x33d>
 c24:	8a 2d       	mov	r24, r10
 c26:	86 78       	andi	r24, 0x86	; 134
 c28:	59 f0       	breq	.+22     	; 0xc40 <__stack+0x341>
 c2a:	a1 fe       	sbrs	r10, 1
 c2c:	02 c0       	rjmp	.+4      	; 0xc32 <__stack+0x333>
 c2e:	8b e2       	ldi	r24, 0x2B	; 43
 c30:	01 c0       	rjmp	.+2      	; 0xc34 <__stack+0x335>
 c32:	80 e2       	ldi	r24, 0x20	; 32
 c34:	a7 fc       	sbrc	r10, 7
 c36:	8d e2       	ldi	r24, 0x2D	; 45
 c38:	b6 01       	movw	r22, r12
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c40:	89 14       	cp	r8, r9
 c42:	38 f4       	brcc	.+14     	; 0xc52 <__stack+0x353>
 c44:	b6 01       	movw	r22, r12
 c46:	80 e3       	ldi	r24, 0x30	; 48
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c4e:	9a 94       	dec	r9
 c50:	f7 cf       	rjmp	.-18     	; 0xc40 <__stack+0x341>
 c52:	8a 94       	dec	r8
 c54:	f3 01       	movw	r30, r6
 c56:	e8 0d       	add	r30, r8
 c58:	f1 1d       	adc	r31, r1
 c5a:	80 81       	ld	r24, Z
 c5c:	b6 01       	movw	r22, r12
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c64:	81 10       	cpse	r8, r1
 c66:	f5 cf       	rjmp	.-22     	; 0xc52 <__stack+0x353>
 c68:	22 20       	and	r2, r2
 c6a:	09 f4       	brne	.+2      	; 0xc6e <__stack+0x36f>
 c6c:	42 ce       	rjmp	.-892    	; 0x8f2 <vfprintf+0x24>
 c6e:	b6 01       	movw	r22, r12
 c70:	80 e2       	ldi	r24, 0x20	; 32
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c78:	2a 94       	dec	r2
 c7a:	f6 cf       	rjmp	.-20     	; 0xc68 <__stack+0x369>
 c7c:	f6 01       	movw	r30, r12
 c7e:	86 81       	ldd	r24, Z+6	; 0x06
 c80:	97 81       	ldd	r25, Z+7	; 0x07
 c82:	02 c0       	rjmp	.+4      	; 0xc88 <__stack+0x389>
 c84:	8f ef       	ldi	r24, 0xFF	; 255
 c86:	9f ef       	ldi	r25, 0xFF	; 255
 c88:	2b 96       	adiw	r28, 0x0b	; 11
 c8a:	e2 e1       	ldi	r30, 0x12	; 18
 c8c:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__epilogue_restores__>

00000c90 <strnlen_P>:
 c90:	fc 01       	movw	r30, r24
 c92:	05 90       	lpm	r0, Z+
 c94:	61 50       	subi	r22, 0x01	; 1
 c96:	70 40       	sbci	r23, 0x00	; 0
 c98:	01 10       	cpse	r0, r1
 c9a:	d8 f7       	brcc	.-10     	; 0xc92 <strnlen_P+0x2>
 c9c:	80 95       	com	r24
 c9e:	90 95       	com	r25
 ca0:	8e 0f       	add	r24, r30
 ca2:	9f 1f       	adc	r25, r31
 ca4:	08 95       	ret

00000ca6 <strnlen>:
 ca6:	fc 01       	movw	r30, r24
 ca8:	61 50       	subi	r22, 0x01	; 1
 caa:	70 40       	sbci	r23, 0x00	; 0
 cac:	01 90       	ld	r0, Z+
 cae:	01 10       	cpse	r0, r1
 cb0:	d8 f7       	brcc	.-10     	; 0xca8 <strnlen+0x2>
 cb2:	80 95       	com	r24
 cb4:	90 95       	com	r25
 cb6:	8e 0f       	add	r24, r30
 cb8:	9f 1f       	adc	r25, r31
 cba:	08 95       	ret

00000cbc <fputc>:
 cbc:	0f 93       	push	r16
 cbe:	1f 93       	push	r17
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	fb 01       	movw	r30, r22
 cc6:	23 81       	ldd	r18, Z+3	; 0x03
 cc8:	21 fd       	sbrc	r18, 1
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <fputc+0x16>
 ccc:	8f ef       	ldi	r24, 0xFF	; 255
 cce:	9f ef       	ldi	r25, 0xFF	; 255
 cd0:	2c c0       	rjmp	.+88     	; 0xd2a <fputc+0x6e>
 cd2:	22 ff       	sbrs	r18, 2
 cd4:	16 c0       	rjmp	.+44     	; 0xd02 <fputc+0x46>
 cd6:	46 81       	ldd	r20, Z+6	; 0x06
 cd8:	57 81       	ldd	r21, Z+7	; 0x07
 cda:	24 81       	ldd	r18, Z+4	; 0x04
 cdc:	35 81       	ldd	r19, Z+5	; 0x05
 cde:	42 17       	cp	r20, r18
 ce0:	53 07       	cpc	r21, r19
 ce2:	44 f4       	brge	.+16     	; 0xcf4 <fputc+0x38>
 ce4:	a0 81       	ld	r26, Z
 ce6:	b1 81       	ldd	r27, Z+1	; 0x01
 ce8:	9d 01       	movw	r18, r26
 cea:	2f 5f       	subi	r18, 0xFF	; 255
 cec:	3f 4f       	sbci	r19, 0xFF	; 255
 cee:	31 83       	std	Z+1, r19	; 0x01
 cf0:	20 83       	st	Z, r18
 cf2:	8c 93       	st	X, r24
 cf4:	26 81       	ldd	r18, Z+6	; 0x06
 cf6:	37 81       	ldd	r19, Z+7	; 0x07
 cf8:	2f 5f       	subi	r18, 0xFF	; 255
 cfa:	3f 4f       	sbci	r19, 0xFF	; 255
 cfc:	37 83       	std	Z+7, r19	; 0x07
 cfe:	26 83       	std	Z+6, r18	; 0x06
 d00:	14 c0       	rjmp	.+40     	; 0xd2a <fputc+0x6e>
 d02:	8b 01       	movw	r16, r22
 d04:	ec 01       	movw	r28, r24
 d06:	fb 01       	movw	r30, r22
 d08:	00 84       	ldd	r0, Z+8	; 0x08
 d0a:	f1 85       	ldd	r31, Z+9	; 0x09
 d0c:	e0 2d       	mov	r30, r0
 d0e:	09 95       	icall
 d10:	89 2b       	or	r24, r25
 d12:	e1 f6       	brne	.-72     	; 0xccc <fputc+0x10>
 d14:	d8 01       	movw	r26, r16
 d16:	16 96       	adiw	r26, 0x06	; 6
 d18:	8d 91       	ld	r24, X+
 d1a:	9c 91       	ld	r25, X
 d1c:	17 97       	sbiw	r26, 0x07	; 7
 d1e:	01 96       	adiw	r24, 0x01	; 1
 d20:	17 96       	adiw	r26, 0x07	; 7
 d22:	9c 93       	st	X, r25
 d24:	8e 93       	st	-X, r24
 d26:	16 97       	sbiw	r26, 0x06	; 6
 d28:	ce 01       	movw	r24, r28
 d2a:	df 91       	pop	r29
 d2c:	cf 91       	pop	r28
 d2e:	1f 91       	pop	r17
 d30:	0f 91       	pop	r16
 d32:	08 95       	ret

00000d34 <__ultoa_invert>:
 d34:	fa 01       	movw	r30, r20
 d36:	aa 27       	eor	r26, r26
 d38:	28 30       	cpi	r18, 0x08	; 8
 d3a:	51 f1       	breq	.+84     	; 0xd90 <__ultoa_invert+0x5c>
 d3c:	20 31       	cpi	r18, 0x10	; 16
 d3e:	81 f1       	breq	.+96     	; 0xda0 <__ultoa_invert+0x6c>
 d40:	e8 94       	clt
 d42:	6f 93       	push	r22
 d44:	6e 7f       	andi	r22, 0xFE	; 254
 d46:	6e 5f       	subi	r22, 0xFE	; 254
 d48:	7f 4f       	sbci	r23, 0xFF	; 255
 d4a:	8f 4f       	sbci	r24, 0xFF	; 255
 d4c:	9f 4f       	sbci	r25, 0xFF	; 255
 d4e:	af 4f       	sbci	r26, 0xFF	; 255
 d50:	b1 e0       	ldi	r27, 0x01	; 1
 d52:	3e d0       	rcall	.+124    	; 0xdd0 <__ultoa_invert+0x9c>
 d54:	b4 e0       	ldi	r27, 0x04	; 4
 d56:	3c d0       	rcall	.+120    	; 0xdd0 <__ultoa_invert+0x9c>
 d58:	67 0f       	add	r22, r23
 d5a:	78 1f       	adc	r23, r24
 d5c:	89 1f       	adc	r24, r25
 d5e:	9a 1f       	adc	r25, r26
 d60:	a1 1d       	adc	r26, r1
 d62:	68 0f       	add	r22, r24
 d64:	79 1f       	adc	r23, r25
 d66:	8a 1f       	adc	r24, r26
 d68:	91 1d       	adc	r25, r1
 d6a:	a1 1d       	adc	r26, r1
 d6c:	6a 0f       	add	r22, r26
 d6e:	71 1d       	adc	r23, r1
 d70:	81 1d       	adc	r24, r1
 d72:	91 1d       	adc	r25, r1
 d74:	a1 1d       	adc	r26, r1
 d76:	20 d0       	rcall	.+64     	; 0xdb8 <__ultoa_invert+0x84>
 d78:	09 f4       	brne	.+2      	; 0xd7c <__ultoa_invert+0x48>
 d7a:	68 94       	set
 d7c:	3f 91       	pop	r19
 d7e:	2a e0       	ldi	r18, 0x0A	; 10
 d80:	26 9f       	mul	r18, r22
 d82:	11 24       	eor	r1, r1
 d84:	30 19       	sub	r19, r0
 d86:	30 5d       	subi	r19, 0xD0	; 208
 d88:	31 93       	st	Z+, r19
 d8a:	de f6       	brtc	.-74     	; 0xd42 <__ultoa_invert+0xe>
 d8c:	cf 01       	movw	r24, r30
 d8e:	08 95       	ret
 d90:	46 2f       	mov	r20, r22
 d92:	47 70       	andi	r20, 0x07	; 7
 d94:	40 5d       	subi	r20, 0xD0	; 208
 d96:	41 93       	st	Z+, r20
 d98:	b3 e0       	ldi	r27, 0x03	; 3
 d9a:	0f d0       	rcall	.+30     	; 0xdba <__ultoa_invert+0x86>
 d9c:	c9 f7       	brne	.-14     	; 0xd90 <__ultoa_invert+0x5c>
 d9e:	f6 cf       	rjmp	.-20     	; 0xd8c <__ultoa_invert+0x58>
 da0:	46 2f       	mov	r20, r22
 da2:	4f 70       	andi	r20, 0x0F	; 15
 da4:	40 5d       	subi	r20, 0xD0	; 208
 da6:	4a 33       	cpi	r20, 0x3A	; 58
 da8:	18 f0       	brcs	.+6      	; 0xdb0 <__ultoa_invert+0x7c>
 daa:	49 5d       	subi	r20, 0xD9	; 217
 dac:	31 fd       	sbrc	r19, 1
 dae:	40 52       	subi	r20, 0x20	; 32
 db0:	41 93       	st	Z+, r20
 db2:	02 d0       	rcall	.+4      	; 0xdb8 <__ultoa_invert+0x84>
 db4:	a9 f7       	brne	.-22     	; 0xda0 <__ultoa_invert+0x6c>
 db6:	ea cf       	rjmp	.-44     	; 0xd8c <__ultoa_invert+0x58>
 db8:	b4 e0       	ldi	r27, 0x04	; 4
 dba:	a6 95       	lsr	r26
 dbc:	97 95       	ror	r25
 dbe:	87 95       	ror	r24
 dc0:	77 95       	ror	r23
 dc2:	67 95       	ror	r22
 dc4:	ba 95       	dec	r27
 dc6:	c9 f7       	brne	.-14     	; 0xdba <__ultoa_invert+0x86>
 dc8:	00 97       	sbiw	r24, 0x00	; 0
 dca:	61 05       	cpc	r22, r1
 dcc:	71 05       	cpc	r23, r1
 dce:	08 95       	ret
 dd0:	9b 01       	movw	r18, r22
 dd2:	ac 01       	movw	r20, r24
 dd4:	0a 2e       	mov	r0, r26
 dd6:	06 94       	lsr	r0
 dd8:	57 95       	ror	r21
 dda:	47 95       	ror	r20
 ddc:	37 95       	ror	r19
 dde:	27 95       	ror	r18
 de0:	ba 95       	dec	r27
 de2:	c9 f7       	brne	.-14     	; 0xdd6 <__ultoa_invert+0xa2>
 de4:	62 0f       	add	r22, r18
 de6:	73 1f       	adc	r23, r19
 de8:	84 1f       	adc	r24, r20
 dea:	95 1f       	adc	r25, r21
 dec:	a0 1d       	adc	r26, r0
 dee:	08 95       	ret

00000df0 <__prologue_saves__>:
 df0:	2f 92       	push	r2
 df2:	3f 92       	push	r3
 df4:	4f 92       	push	r4
 df6:	5f 92       	push	r5
 df8:	6f 92       	push	r6
 dfa:	7f 92       	push	r7
 dfc:	8f 92       	push	r8
 dfe:	9f 92       	push	r9
 e00:	af 92       	push	r10
 e02:	bf 92       	push	r11
 e04:	cf 92       	push	r12
 e06:	df 92       	push	r13
 e08:	ef 92       	push	r14
 e0a:	ff 92       	push	r15
 e0c:	0f 93       	push	r16
 e0e:	1f 93       	push	r17
 e10:	cf 93       	push	r28
 e12:	df 93       	push	r29
 e14:	cd b7       	in	r28, 0x3d	; 61
 e16:	de b7       	in	r29, 0x3e	; 62
 e18:	ca 1b       	sub	r28, r26
 e1a:	db 0b       	sbc	r29, r27
 e1c:	0f b6       	in	r0, 0x3f	; 63
 e1e:	f8 94       	cli
 e20:	de bf       	out	0x3e, r29	; 62
 e22:	0f be       	out	0x3f, r0	; 63
 e24:	cd bf       	out	0x3d, r28	; 61
 e26:	09 94       	ijmp

00000e28 <__epilogue_restores__>:
 e28:	2a 88       	ldd	r2, Y+18	; 0x12
 e2a:	39 88       	ldd	r3, Y+17	; 0x11
 e2c:	48 88       	ldd	r4, Y+16	; 0x10
 e2e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e30:	6e 84       	ldd	r6, Y+14	; 0x0e
 e32:	7d 84       	ldd	r7, Y+13	; 0x0d
 e34:	8c 84       	ldd	r8, Y+12	; 0x0c
 e36:	9b 84       	ldd	r9, Y+11	; 0x0b
 e38:	aa 84       	ldd	r10, Y+10	; 0x0a
 e3a:	b9 84       	ldd	r11, Y+9	; 0x09
 e3c:	c8 84       	ldd	r12, Y+8	; 0x08
 e3e:	df 80       	ldd	r13, Y+7	; 0x07
 e40:	ee 80       	ldd	r14, Y+6	; 0x06
 e42:	fd 80       	ldd	r15, Y+5	; 0x05
 e44:	0c 81       	ldd	r16, Y+4	; 0x04
 e46:	1b 81       	ldd	r17, Y+3	; 0x03
 e48:	aa 81       	ldd	r26, Y+2	; 0x02
 e4a:	b9 81       	ldd	r27, Y+1	; 0x01
 e4c:	ce 0f       	add	r28, r30
 e4e:	d1 1d       	adc	r29, r1
 e50:	0f b6       	in	r0, 0x3f	; 63
 e52:	f8 94       	cli
 e54:	de bf       	out	0x3e, r29	; 62
 e56:	0f be       	out	0x3f, r0	; 63
 e58:	cd bf       	out	0x3d, r28	; 61
 e5a:	ed 01       	movw	r28, r26
 e5c:	08 95       	ret

00000e5e <_exit>:
 e5e:	f8 94       	cli

00000e60 <__stop_program>:
 e60:	ff cf       	rjmp	.-2      	; 0xe60 <__stop_program>
